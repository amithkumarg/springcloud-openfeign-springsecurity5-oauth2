plugins {
  id 'java-library'
  // Generate IntelliJ IDEA's .idea & .iml project files
  id 'idea'
  id 'jacoco'
  id 'org.sonarqube' version "${sonarqubePluginVersion}"
  id 'org.springframework.boot' version "${springbootPluginVersion}"
  id 'io.spring.dependency-management' version "${springDependencyManagementPluginVersion}"
  id 'checkstyle'
  id 'com.github.spotbugs' version "${spotbugsPluginVersion}"
  id 'pmd'
  id 'maven-publish'
  id 'org.ajoberstar.reckon' version "${reckonVersion}"
}

group = 'com.amithkumarg'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  //spring
  //required to create security context
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

  //spring-cloud
  implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

  //annotation processors
  annotationProcessor 'org.projectlombok:lombok'

  //generic depedencies
  implementation 'org.apache.commons:commons-lang3'
  implementation "org.apache.commons:commons-collections4:${commonsCollectionsVersion}"
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.fasterxml.jackson.core:jackson-annotations'
  compileOnly 'org.projectlombok:lombok'
  compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
  spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugsVersion}"

  //tests annotation processors
  testAnnotationProcessor 'org.projectlombok:lombok'

  //tests
  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testCompileOnly 'org.projectlombok:lombok'
  testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation "uk.org.webcompere:system-stubs-jupiter:${systemStubVersion}"
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}


java {
  sourceCompatibility = JavaVersion.VERSION_11
}

bootJar {
  enabled = false
}

jar {
  enabled = true
}

reckon {
  scopeFromProp()
  snapshotFromProp()
}

reckonTagCreate.dependsOn check

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport // report is always generated after tests run
}

def jacocoExclude = [
    '**/model/**'
] //placeholder to add any exclusion from jacoco test coverage

jacocoTestReport {
  dependsOn test // tests are required to run before generating the report
  reports {
    xml.enabled = true //required for sonarqube
  }
  afterEvaluate {
    getClassDirectories().setFrom(classDirectories.files.collect {
      fileTree(dir: it, exclude: jacocoExclude)
    })
  }
}
jacocoTestCoverageVerification {
  dependsOn jacocoTestReport
  violationRules {
    rule {
      limit {
        minimum = 1.0
      }
    }
  }
  afterEvaluate {
    getClassDirectories().setFrom(classDirectories.files.collect {
      fileTree(dir: it, exclude: jacocoExclude)
    })
  }
}
check {
  dependsOn jacocoTestCoverageVerification
}
sonarqube {
  properties {
    property 'sonar.exclusions', jacocoExclude
  }
}

System.setProperty('org.checkstyle.google.suppressionfilter.config', "${project.projectDir}/checkstyle-suppressions.xml")
checkstyle {
  toolVersion = checkstyleVersion
  configFile = file('/google_checks.xml')
  ignoreFailures = false
  showViolations = true
  maxWarnings = 0
}

spotbugs {
  showStackTraces = true
  showProgress = true
  excludeFilter = file('spotbugs-exclude.xml')
}

tasks.matching { task -> task.name.startsWith('spotbugs') }.forEach {
  it.reports {
    html.enabled = true
    xml.enabled = false
    // spotbugs does not allow to generate a xml and html report at once https://github.com/spotbugs/spotbugs/issues/857
  }
}

pmd {
  toolVersion = pmdVersion
  ruleSetFiles = files('pmd-ruleset.xml') // Pmd config location
  ruleSets = []
}

task projectName {
  doLast {
    println project.name
  }
}

task projectVersion {
  doLast {
    println project.version.toString()
  }
}

publishing {
  publications {
    main(MavenPublication) {
      artifact jar
    }
  }
  repositories {
    maven {
//      def releasesRepoUrl = "https://my.repo.com/repository/amithkumarg-maven-release"
//      def snapshotsRepoUrl = "https://my.repo.com/repository/amithkumarg-maven-snapshot"
//      url version.toString().endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      url 'https://maven.pkg.github.com/amithkumarg/springcloud-openfeign-springsecurity5-oauth2'
      credentials {
        password System.getenv('PERSONAL_GITHUB_TOKEN')
      }
    }
  }
}